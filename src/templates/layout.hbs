<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" href="/assets/styles/styles.css" />

    <script src="https://cdn.jsdelivr.net/npm/fuse.js@6.6.2"></script>
    <link rel="stylesheet" type="text/css"
        href="https://cdn.jsdelivr.net/npm/@phosphor-icons/web@2.1.1/src/regular/style.css" />
    <link rel="stylesheet" type="text/css"
        href="https://cdn.jsdelivr.net/npm/@phosphor-icons/web@2.1.1/src/fill/style.css" />
</head>

<body>

    <div class="container">
        <div class="sidebar">
            <div class="sidebar-inner">
                <h1 class="owner"><a href="/">{{owner}}</a></h1>
                <div class="sidebar-theme-toggle">
                    <button class="theme-toggle" onclick="toggleTheme(true)" aria-label="Toggle Theme">
                        <i class="ph ph-sun"></i>
                    </button>
                    <button class="search-button" onclick="openSearch()" aria-label="Open Search">
                        <i class="ph ph-magnifying-glass"></i>
                    </button>
                </div>
                <div id="file-tree" class="file-tree"></div>
                <div class="divider" draggable="true"></div>
            </div>
        </div>
        <div class="content">
            <nav class="top-navbar">
                <div class="top-navbar-left">
                    <button class="sidebar-toggle" onclick="toggleNav()" aria-label="Toggle Sidebar">
                        <i class="ph ph-list"></i>
                    </button>
                    <img class="profile-picture" src="{{profilePicturePath}}" alt="profile-picture" />
                    <a href="/">{{owner}}</a>
                </div>
                <div class="top-navbar-right">
                    <button class="search-button" onclick="openSearch()" aria-label="Open Search">
                        <i class="ph ph-magnifying-glass"></i>
                    </button>
                    <button class="theme-toggle" onclick="toggleTheme(true)" aria-label="Toggle Theme">
                        <i class="ph ph-sun"></i>
                    </button>
                </div>
            </nav>
            <div class="content-container">
                <div class="content-container-inner">
                    {{{content}}}
                </div>
            </div>
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', async function () {
            try {
                const fileTreeData = JSON.parse('{{{fileTree}}}')
                initializeFileTree(fileTreeData)
            } catch (error) {
                console.error('Error parsing file tree:', error);
            }
            toggleTheme();
            initializeCopyButton();
        })

        function initializeFileTree(fileTreeData) {
            const fileTreeElement = document.getElementById('file-tree');
            if (!fileTreeElement) return;

            const expandedStateKey = 'fileTreeExpandedState';
            const expandedState = new Map(JSON.parse(localStorage.getItem(expandedStateKey)) || []);

            function saveExpandedState() {
                localStorage.setItem(expandedStateKey, JSON.stringify([...expandedState]));
            }

            function renderFileTreeNode(node, path = '') {
                const list = document.createElement('ul');
                const item = document.createElement('li');
                item.classList.add(node.type);
                list.appendChild(item);

                const currentPath = path ? `${path}/${node.name}` : node.name;

                if (node.type === 'directory' && node.children.length > 0) {
                    const directoryWrapper = document.createElement('div');
                    directoryWrapper.classList.add('directory-wrapper');
                    directoryWrapper.style.display = 'flex';
                    directoryWrapper.style.alignItems = 'center';

                    const arrow = document.createElement('i');
                    arrow.setAttribute('class', 'ph ph-caret-right directory-arrow');
                    directoryWrapper.appendChild(arrow);

                    const directoryName = document.createElement('span');
                    directoryName.setAttribute('class', 'dirname');
                    directoryName.textContent = node.name.replaceAll("_", " ").replaceAll("-", " ").replace(".md", "")
                    directoryWrapper.appendChild(directoryName);

                    item.appendChild(directoryWrapper);

                    const childList = document.createElement('ul');
                    const isExpanded = expandedState.get(currentPath) || false;

                    if (isExpanded) {
                        item.classList.add('open');
                    } else {
                        childList.classList.add('collapsed');
                    }

                    node.children.forEach(child => {
                        const childNode = renderFileTreeNode(child, currentPath);
                        childList.appendChild(childNode);
                    });

                    directoryWrapper.addEventListener('click', function (e) {
                        e.stopPropagation();
                        const parentLi = this.parentNode;
                        const isOpen = parentLi.classList.toggle('open');
                        const childrenUl = parentLi.querySelector('ul');
                        childrenUl.classList.toggle('collapsed');
                        expandedState.set(currentPath, isOpen);
                        saveExpandedState();
                    });

                    item.appendChild(childList);
                } else if (node.type === 'file') {
                    item.textContent = node.name.replace(".md", "");
                    item.addEventListener('click', function (e) {
                        e.stopPropagation();
                        const path = node.path.replace(/\.md$/, '.html');
                        window.location.href = '/' + path;
                    });
                }

                return item;
            }

            const rootList = document.createElement('ul');
            fileTreeData.forEach(node => {
                rootList.appendChild(renderFileTreeNode(node));
            });

            fileTreeElement.appendChild(rootList);
        }


        function toggleNav() {
            const sidebar = document.querySelector('.sidebar');
            sidebar.classList.toggle('open');
        }

        function openSearch() {
            // Placeholder for search functionality
            console.log('Search functionality not implemented');
        }

        function toggleTheme(toggle = false) {
            let theme = localStorage.getItem('theme');

            if (!theme) {
                theme = 'dark';
                localStorage.setItem('theme', 'dark');
            }

            if (toggle) {
                theme = theme === 'dark' ? 'light' : 'dark';
                localStorage.setItem('theme', theme);
            }

            const body = document.body;

            if (theme === 'dark') {
                body.classList.remove('light');
                body.classList.add('dark');
            } else if (theme === 'light') {
                body.classList.remove('dark');
                body.classList.add('light');
            }
        }

        function initializeCopyButton() {
            const codeBlocks = document.querySelectorAll('.content-container-inner pre');
            codeBlocks.forEach(block => {
                const button = document.createElement('button');
                button.textContent = 'Copy';
                button.classList.add('copy-button');

                button.addEventListener('click', () => {
                    const code = block.querySelector('code')?.textContent || block.textContent;
                    navigator.clipboard.writeText(code).then(() => {
                        button.textContent = 'Copied!';
                        setTimeout(() => {
                            button.textContent = 'Copy';
                        }, 2000);
                    }).catch(err => {
                        console.error('Failed to copy:', err);
                        button.textContent = 'Error!';
                        setTimeout(() => {
                            button.textContent = 'Copy';
                        }, 2000);
                    });
                });
                block.appendChild(button);
            });
        }
    </script>
</body>

</html>
